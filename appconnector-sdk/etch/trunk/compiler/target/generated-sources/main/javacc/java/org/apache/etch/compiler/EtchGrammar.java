/* Generated By:JavaCC: Do not edit this line. EtchGrammar.java */
package org.apache.etch.compiler;

import java.io.InputStream;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.etch.compiler.ast.Constant;
import org.apache.etch.compiler.ast.Enumx;
import org.apache.etch.compiler.ast.Except;
import org.apache.etch.compiler.ast.Service;
import org.apache.etch.compiler.ast.Item;
import org.apache.etch.compiler.ast.Message;
import org.apache.etch.compiler.ast.Module;
import org.apache.etch.compiler.ast.Name;
import org.apache.etch.compiler.ast.Opt;
import org.apache.etch.compiler.ast.ParamList;
import org.apache.etch.compiler.ast.Parameter;
import org.apache.etch.compiler.ast.Struct;
import org.apache.etch.compiler.ast.Thrown;
import org.apache.etch.compiler.ast.TypeRef;

/** The JavaCC grammar file for the etch compiler. */
public class EtchGrammar extends EtchHelper implements EtchGrammarConstants {
        public EtchGrammar( Backend b, InputStream is )
        {
                this( is );
                this.binding = b;
        }

        private Backend binding;

        private Service gintf;

  final public Module module(CmdLineOptions cmdLineOptions) throws ParseException {
  Module m;
    m = module_stmt(cmdLineOptions);
    service(m);
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Module module_stmt(CmdLineOptions cmdLineOptions) throws ParseException {
  Token k; Token t;
    k = jj_consume_token(MODULE);
    t = xid();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
                Module m = new Module( new Name( t, t.image ), cmdLineOptions );
                moduleComment( m, k.specialToken );
                {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public void service(Module m) throws ParseException {
  Map<String, Opt> opts; Token k; Name n; Service i;
                doStartService();
    opts = opts();
    k = jj_consume_token(SERVICE);
    n = def();
                saveComment( k.specialToken );
                i = m.addService( n, opts );
                serviceComment( i, getComment() );
                binding.addDefaults( i );
                Service ointf = gintf;
                gintf = i;
    jj_consume_token(LBRACE);
    stmts(i);
    jj_consume_token(RBRACE);
                gintf = ointf;
                doEndService( i );
  }

  final public Map<String, Opt> opts() throws ParseException {
  Map<String, Opt> map = new HashMap<String, Opt>(); Opt o;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      o = opt();
                  map.put( o.name(), o );
    }
          {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public Opt opt() throws ParseException {
  Token k; Token n; List<Token> list = new ArrayList<Token>();
    k = jj_consume_token(AT);
    n = id();
                saveComment( k.specialToken );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      args(list);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
          {if (true) return makeOpt( new Name( n, n.image ), list );}
    throw new Error("Missing return statement in function");
  }

  final public void args(List<Token> list) throws ParseException {
  Token v;
    v = arg();
                    list.add( v );
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      v = arg();
                  list.add( v );
    }
  }

  final public Token arg() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER:
    case OCTAL:
    case HEX:
    case BINARY:
    case DECIMAL:
    case STR:
      t = cvalue();
      break;
    case ID:
    case QID:
      t = ref();
      break;
    case NULL:
      t = jj_consume_token(NULL);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token cvalue() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case OCTAL:
      t = jj_consume_token(OCTAL);
      break;
    case HEX:
      t = jj_consume_token(HEX);
      break;
    case BINARY:
      t = jj_consume_token(BINARY);
      break;
    case DECIMAL:
      t = jj_consume_token(DECIMAL);
      break;
    case STR:
      t = jj_consume_token(STR);
                            fixString( t );
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void stmts(Service i) throws ParseException {
  Map<String, Opt> opts;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CONST:
      case DOUBLE:
      case ENUM:
      case EXCEPTION:
      case EXTERN:
      case FLOAT:
      case INCLUDE:
      case INT:
      case LONG:
      case MIXIN:
      case OBJECT:
      case SHORT:
      case STRING:
      case STRUCT:
      case VOID:
      case ID:
      case QID:
      case AT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      opts = opts();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MIXIN:
        mixin_stmt(i, opts);
        break;
      case INCLUDE:
        include_stmt(i, opts);
        break;
      case CONST:
        const_stmt(i, opts);
        break;
      case ENUM:
        enum_stmt(i, opts);
        break;
      case STRUCT:
        struct_stmt(i, opts);
        break;
      case EXTERN:
        extern_stmt(i, opts);
        break;
      case EXCEPTION:
        exception_stmt(i, opts);
        break;
      case BOOLEAN:
      case BYTE:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case OBJECT:
      case SHORT:
      case STRING:
      case VOID:
      case ID:
      case QID:
        message_stmt(i, opts);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void mixin_stmt(Service i, Map<String, Opt> opts) throws ParseException {
  Token t;
    jj_consume_token(MIXIN);
    t = ref();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
          i.addMixin( new Name( t, t.image ), opts );
  }

  final public void include_stmt(Service i, Map<String, Opt> opts) throws ParseException {
  Token f;
    jj_consume_token(INCLUDE);
    f = jj_consume_token(STR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                doInclude( f, i );
  }

  final public void const_stmt(Service i, Map<String, Opt> opts) throws ParseException {
  Token k; TypeRef tr; Name n; Token v;
    k = jj_consume_token(CONST);
    tr = ctype();
    n = def();
    jj_consume_token(EQ);
    v = cvalue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
                Constant c = i.addConstant( n, opts, tr, v );
                constantComment( c, k.specialToken );
  }

  final public void enum_stmt(Service i, Map<String, Opt> opts) throws ParseException {
  Token k; Name n; Enumx e;
    k = jj_consume_token(ENUM);
    n = def();
                e = i.addEnum( n, opts );
                enumComment( e, k.specialToken );
    jj_consume_token(LPAREN);
    item_list(e);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void item_list(Enumx e) throws ParseException {
  Name n; Item i;
    n = def();
                i = e.addItem( n );
                itemComment( i, n.token.specialToken );
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      n = def();
                        i = e.addItem( n );
                        itemComment( i, n.token.specialToken );
    }
  }

  final public void struct_stmt(Service i, Map<String, Opt> opts) throws ParseException {
  Token k; Name n; Struct s; Token x; Token e;
    k = jj_consume_token(STRUCT);
    n = def();
          saveComment( k.specialToken ); x = getComment(); s = i.addStruct( n, opts );
    params(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      e = ref();
                                s.setExtends( new Name( e, e.image ) );
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
          structComment( s, x );
  }

  final public void extern_stmt(Service i, Map<String, Opt> opts) throws ParseException {
  Name n;
    jj_consume_token(EXTERN);
    n = def();
          i.addExtern( n, opts );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void exception_stmt(Service i, Map<String, Opt> opts) throws ParseException {
  Token k; Name n; Except s; Token x; Token e;
    k = jj_consume_token(EXCEPTION);
    n = def();
          saveComment( k.specialToken ); x = getComment(); s = i.addExcept( n, opts );
    params(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      e = ref();
                                s.setExtends( new Name( e, e.image ) );
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
          exceptComment( s, x );
  }

  final public void message_stmt(Service i, Map<String, Opt> opts) throws ParseException {
  TypeRef rt; Name n; Message m; Token k;
    rt = rtype();
    n = def();
                saveComment( rt.type().specialToken );
                k = getComment();
                m = i.addMessage( n, opts, rt );
    params(m);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      throws_list(m);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
          messageComment( m, k );
  }

  final public void throws_list(Message m) throws ParseException {
  Token n; Thrown t;
    n = ref();
                t = m.addThrown( new Name( n, n.image ) );
                thrownComment( t, n.specialToken );
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      n = ref();
                        t = m.addThrown( new Name( n, n.image ) );
                        thrownComment( t, n.specialToken );
    }
  }

  final public Token id() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token qid() throws ParseException {
  Token t;
    t = jj_consume_token(QID);
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token xid() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QID:
      t = qid();
      break;
    case ID:
      t = id();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Name def() throws ParseException {
  Token t;
    t = id();
          {if (true) return new Name( t, t.image );}
    throw new Error("Missing return statement in function");
  }

  final public Token ref() throws ParseException {
  Token t;
    t = xid();
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef ctype() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case BYTE:
      t = jj_consume_token(BYTE);
      break;
    case SHORT:
      t = jj_consume_token(SHORT);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case LONG:
      t = jj_consume_token(LONG);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new TypeRef( gintf, t );}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef ptype() throws ParseException {
  TypeRef tr; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case STRING:
      tr = ctype();
      break;
    case OBJECT:
      t = jj_consume_token(OBJECT);
                           tr = new TypeRef( gintf, t );
      break;
    case ID:
    case QID:
      t = ref();
                            tr = new TypeRef( gintf, t );
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tr;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef rtype() throws ParseException {
  TypeRef tr; Token t; int d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case OBJECT:
    case SHORT:
    case STRING:
    case ID:
    case QID:
      tr = ptype();
      d = dim();
                                           tr.setDim( d );
      break;
    case VOID:
      t = jj_consume_token(VOID);
                             tr = new TypeRef( gintf, t );
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tr;}
    throw new Error("Missing return statement in function");
  }

  final public int dim() throws ParseException {
  int d = 0;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_6;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                  d++;
    }
          {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public void params(ParamList<?> pl) throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case OBJECT:
    case SHORT:
    case STRING:
    case ID:
    case QID:
      param(pl);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        param(pl);
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void param(ParamList<?> pl) throws ParseException {
  TypeRef tr; int d; Name n;
    tr = ptype();
    d = dim();
    n = def();
                tr.setDim( d );
                Parameter p = pl.addParameter( n, tr );
                parameterComment( p, tr.type().specialToken );
  }

  /** Generated Token Manager. */
  public EtchGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x2040000,0x40000,0x74fafc00,0x74fafc00,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x10000,0x0,0x80000000,0x0,0x0,0x0,0x30682c00,0x34682c00,0x34682c00,0x0,0x0,0x34682c00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20000,0x4000,0x40000,0x8000,0x33cd,0x33c1,0x400e,0xe,0x20000,0x20000,0x20000,0x20000,0x8000,0x0,0x20000,0x20000,0x0,0x20000,0x0,0x20000,0x8000,0xc,0x0,0xc,0xe,0x400000,0x8000,0xc,};
   }

  /** Constructor with InputStream. */
  public EtchGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EtchGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EtchGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EtchGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EtchGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EtchGrammar(EtchGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EtchGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
