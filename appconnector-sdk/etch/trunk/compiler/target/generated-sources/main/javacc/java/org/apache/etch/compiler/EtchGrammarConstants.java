/* Generated By:JavaCC: Do not edit this line. EtchGrammarConstants.java */
package org.apache.etch.compiler;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EtchGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE1 = 6;
  /** RegularExpression Id. */
  int SINGLE2 = 7;
  /** RegularExpression Id. */
  int FORMAL = 8;
  /** RegularExpression Id. */
  int BLOCK = 9;
  /** RegularExpression Id. */
  int BOOLEAN = 10;
  /** RegularExpression Id. */
  int BYTE = 11;
  /** RegularExpression Id. */
  int CONST = 12;
  /** RegularExpression Id. */
  int DOUBLE = 13;
  /** RegularExpression Id. */
  int ENUM = 14;
  /** RegularExpression Id. */
  int EXCEPTION = 15;
  /** RegularExpression Id. */
  int EXTENDS = 16;
  /** RegularExpression Id. */
  int EXTERN = 17;
  /** RegularExpression Id. */
  int FALSE = 18;
  /** RegularExpression Id. */
  int FLOAT = 19;
  /** RegularExpression Id. */
  int INCLUDE = 20;
  /** RegularExpression Id. */
  int INT = 21;
  /** RegularExpression Id. */
  int LONG = 22;
  /** RegularExpression Id. */
  int MIXIN = 23;
  /** RegularExpression Id. */
  int MODULE = 24;
  /** RegularExpression Id. */
  int NULL = 25;
  /** RegularExpression Id. */
  int OBJECT = 26;
  /** RegularExpression Id. */
  int SERVICE = 27;
  /** RegularExpression Id. */
  int SHORT = 28;
  /** RegularExpression Id. */
  int STRING = 29;
  /** RegularExpression Id. */
  int STRUCT = 30;
  /** RegularExpression Id. */
  int THROWS = 31;
  /** RegularExpression Id. */
  int TRUE = 32;
  /** RegularExpression Id. */
  int VOID = 33;
  /** RegularExpression Id. */
  int ID = 34;
  /** RegularExpression Id. */
  int QID = 35;
  /** RegularExpression Id. */
  int INT_LIT = 36;
  /** RegularExpression Id. */
  int SGN = 37;
  /** RegularExpression Id. */
  int INTEGER = 38;
  /** RegularExpression Id. */
  int OCTAL = 39;
  /** RegularExpression Id. */
  int HEX = 40;
  /** RegularExpression Id. */
  int BINARY = 41;
  /** RegularExpression Id. */
  int EXP = 42;
  /** RegularExpression Id. */
  int FRACTION = 43;
  /** RegularExpression Id. */
  int DECIMAL = 44;
  /** RegularExpression Id. */
  int STR = 45;
  /** RegularExpression Id. */
  int AT = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int EQ = 48;
  /** RegularExpression Id. */
  int SEMI = 49;
  /** RegularExpression Id. */
  int LPAREN = 50;
  /** RegularExpression Id. */
  int RPAREN = 51;
  /** RegularExpression Id. */
  int LBRACE = 52;
  /** RegularExpression Id. */
  int RBRACE = 53;
  /** RegularExpression Id. */
  int LBRACKET = 54;
  /** RegularExpression Id. */
  int RBRACKET = 55;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\f\"",
    "<SINGLE1>",
    "<SINGLE2>",
    "<FORMAL>",
    "<BLOCK>",
    "\"boolean\"",
    "\"byte\"",
    "\"const\"",
    "\"double\"",
    "\"enum\"",
    "\"exception\"",
    "\"extends\"",
    "\"extern\"",
    "\"false\"",
    "\"float\"",
    "\"include\"",
    "\"int\"",
    "\"long\"",
    "\"mixin\"",
    "\"module\"",
    "\"null\"",
    "\"object\"",
    "\"service\"",
    "\"short\"",
    "\"string\"",
    "\"struct\"",
    "\"throws\"",
    "\"true\"",
    "\"void\"",
    "<ID>",
    "<QID>",
    "<INT_LIT>",
    "<SGN>",
    "<INTEGER>",
    "<OCTAL>",
    "<HEX>",
    "<BINARY>",
    "<EXP>",
    "<FRACTION>",
    "<DECIMAL>",
    "<STR>",
    "\"@\"",
    "\",\"",
    "\"=\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
  };

}
