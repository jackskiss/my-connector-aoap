// This file automatically generated by:
//   Apache Etch 1.3.0-incubating (LOCAL-0) / java 1.3.0-incubating (LOCAL-0)
//   Thu Sep 26 14:54:45 KST 2013
// This file is automatically created and should not be edited!

package com.obigo.weblink;

import org.apache.etch.bindings.java.support.DeliveryService;
import org.apache.etch.bindings.java.support.Pool;
import org.apache.etch.bindings.java.support.ServerFactory;
import org.apache.etch.bindings.java.msg.ValueFactory;
import org.apache.etch.bindings.java.support.DefaultServerFactory;
import org.apache.etch.util.core.io.Transport;
import org.apache.etch.bindings.java.support.TransportFactory;
import org.apache.etch.bindings.java.support.TransportHelper;
import org.apache.etch.bindings.java.transport.DefaultDeliveryService;
import org.apache.etch.bindings.java.transport.MailboxManager;
import org.apache.etch.bindings.java.transport.PlainMailboxManager;
import org.apache.etch.bindings.java.transport.TransportMessage;
import org.apache.etch.util.Resources;
import org.apache.etch.util.URL;

/**
 * Transport helper for WebLink. All methods are static.
 */
abstract public class WebLinkHelper extends TransportHelper
{

	/**
	 * Constructs a new server session listener per specifications in uri and
	 * resources. This listener will accept requests from clients for new server
	 * sessions.
	 *
	 * @param uri contains specifications for the server session listener and
	 * for the server session transport stack.
	 *
	 * @param resources additional resources to aid in constructing new server
	 * sessions.
	 *
	 * @param implFactory factory used to construct a new instance implementing
	 * WebLinkServer. The new instance will receive and process messages from
	 * the client session.
	 *
	 * @return a server session listener.
	 *
	 * @throws Exception
	 */
	public static ServerFactory newListener( final String uri,
		final Resources resources, final WebLinkServerFactory implFactory )
		throws Exception
	{
		final Resources res = initResources( resources );
		
		final Transport<ServerFactory> listener = TransportFactory.getListener( uri, res, (Object)implFactory );
		
		return new DefaultServerFactory( listener, implFactory )
		{
			public void newServer( TransportMessage t, String uri, Resources r )
				throws Exception
			{
				ValueFactory vf = (ValueFactory) r.get( Transport.VALUE_FACTORY );
				MailboxManager x = new PlainMailboxManager( t, uri, r );
				DeliveryService d = new DefaultDeliveryService( x, uri, r );
				RemoteWebLinkClient client = new RemoteWebLinkClient( d, vf );
				WebLinkServer server = implFactory.newWebLinkServer( client );
				Pool qp = (Pool) r.get( QUEUED_POOL );
				Pool fp = (Pool) r.get( FREE_POOL );
				new StubWebLinkServer( d, server, qp, fp );
				client._start();
			}

			public ValueFactory newValueFactory( String uri )
			{
				return new ValueFactoryWebLink( uri );
			}
			
			@Override
			public String toString()
			{
				return "WebLinkHelper.ServerFactory/" + listener;
			}
		};
	}

	/**
	 * Factory used by
	 * {@link WebLinkHelper#newListener(String, Resources, ${i}ServerFactory)}
	 * to construct a new instance implementing {@link WebLinkServer}. The new
	 * instance will receive and process messages from the client session.
	 */
	public interface WebLinkServerFactory
	{
		/**
		 * Constructs a new instance implementing WebLinkServer. The new
		 * instance will receive and process messages from the client session.
		 *
		 * @param client an instance of RemoteWebLinkClient which may be used to
		 * send messages to the client session.
		 * @return a new instance implementing WebLinkServer (typically
		 * ImplWebLinkServer).
		 * @throws Exception
		 */
		public WebLinkServer newWebLinkServer( RemoteWebLinkClient client )
			throws Exception;
	}

	/**
	 * Constructs a new client session per specifications in uri and resources.
	 * 
	 * @param uri contains specifications for the client session transport
	 * stack.
	 * 
	 * @param resources additional resources to aid in constructing new client
	 * sessions.
	 * 
	 * @param implFactory factory used to construct a new instance implementing
	 * WebLinkClient. The new instance will receive and process messages from
	 * the server session.
	 * 
	 * @return an instance of RemoteWebLinkServer initialized by uri and
	 * resources which may be used to send messages to the server session.
	 * 
	 * @throws Exception
	 */
	public static RemoteWebLinkServer newServer( String uri,
		Resources resources, WebLinkClientFactory implFactory )
		throws Exception
	{
		final Resources res = initResources( resources );
		
		final ValueFactoryWebLink vf = new ValueFactoryWebLink( uri );
		res.put( Transport.VALUE_FACTORY, vf );
		
		URL u = new URL( uri );
		
		TransportMessage m = TransportFactory.getTransport( uri, res, (Object)implFactory );
		MailboxManager r = new PlainMailboxManager( m, u, resources );
		DeliveryService d = new DefaultDeliveryService( r, u, resources );
		RemoteWebLinkServer server = new RemoteWebLinkServer( d, vf );
		WebLinkClient client = implFactory.newWebLinkClient( server );
		Pool qp = (Pool) res.get( QUEUED_POOL );
		Pool fp = (Pool) res.get( FREE_POOL );
		new StubWebLinkClient( d, client, qp, fp );

		return server;
	}

	/**
	 * Factory used by
	 * {@link WebLinkHelper#newServer(String, Resources, ${i}ClientFactory)}
	 * to construct a new instance implementing {@link WebLinkClient}. The new
	 * instance will receive and process messages from the server session.
	 */
	public interface WebLinkClientFactory
	{
		/**
		 * Constructs a new instance implementing WebLinkClient. The new
		 * instance will receive and process messages from the server session.
		 * 
		 * @param server an instance of RemoteWebLinkServer which may be used to
		 * send messages to the server session.
		 * @return a new instance implementing WebLinkClient (typically
		 * ImplWebLinkClient).
		 * @throws Exception
		 */
		public WebLinkClient newWebLinkClient( RemoteWebLinkServer server )
			throws Exception;
	}
}
